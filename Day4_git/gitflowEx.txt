- 100명 개발자들끼리 협업을 한다.
- 문제점 발생
  코드를 하나의 브랜치에서 사용을 하다보면 코드를 올릴 때 문제가 발생
- 그래서 브랜치 생성을 한다.
  브랜치: 새로운 작업 공간을 말한다.
- git flow 전략을 이용해서 브랜치를 활용한다.
  5개의 브랜치
  main or master 브랜치
  develop 브랜치
  feature 브랜치
  release 브랜치
               -- feature / 분홍구슬   병합 dev    
               -- feature / 하얀구슬
  ㅁ  ---  ㅁ  ---  ㅁ  v1.0  ---  release v2.0
  main     dev      release v1.0


// 위에 브랜치 생성을 너무 많이 한다.
// 개발자들이 짠 코드를 바로 앱을 이용하는 사람들한테 바로 배포 문제가 없다면
// main, feature브랜치만 운영하는 전략도 있다.
// trunk-based 전략
    --- feature1
ㅁ  --- ㅁ  --- ㅁ  --- ㅁ  --- ㅁ
main    --- feature2

실행순서
1. 기능추가, 버그픽스가 필요하면 main브랜치에서 새로운 브랜치를 하나 만들어서 코드를 짠다.
   (**브랜치마다 이름을 잘 작성해야한다.)
2. 기능이 완성되면 main브랜치에 합친다.
3. main브랜치에 있는 코드를 필요할 때마다 유저들에게 배포한다.

- 대략적으로 git flow를 알고있으면 응용이 가능할 정도만!
  : 오후 미션
    - git 전략이 진짜 많다~ 어떤 전략들이 있는지 찾아보기!(스터디)

브랜치 생성
git branch <브랜치명>

git branch -M main
  -M 옵션은 강제 이동 또는 강제 이름 변경을 의미한다.(덮어쓰기)
  
  현재 문제가 발생한 이유는
  main 브랜치를 생성했는데 -M에 의해 현재 main브랜치의 이름을 dev로 변경해라! main사라짐

브랜치 확인
- 브랜치 위치를 확인하고 싶을 때
git branch

현재 브랜치 목록 확인, main이 실제 있는지 검사
git branch -a


**git branch해도 안나올땐 깃에 push안해서 안나오는거임!

실습
  - git flow 이용해서 전략을 만들어보기
  - repository name : 본인이름Project 생성
  - main브랜치 생성, dev 생성, feature/mainPage, 병합
  - 작업폴더 안에는 index.html
  -       feature/mainPage에서 html 문서 안에는 제목태그를 넣어 서의의 게임페이지!
  -                     텍스트로 설명  p태그 재미있게 합시다!
  - 위에 파일을 dev, main 병합하기!